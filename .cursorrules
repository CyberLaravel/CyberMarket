
## **Project Overview**

This project is a **modern e-commerce marketplace** where **sellers can list and sell products**, and **buyers can purchase them** securely. The platform is built with **Laravel** for the backend and **Vue.js with Inertia.js** for the frontend, ensuring a seamless SPA (Single Page Application) experience.

### **Tech Stack**

-   **Backend:** Laravel 11 (with repositories, models, migrations, seeders, factories)
-   **Frontend:** Vue.js (with Inertia.js and shadcn-vue for UI components)
-   **State Management:** Pinia
-   **Database:** PostgreSQL
-   **Storage:** Cloudflare R2 for scalable object storage
-   **Caching:** Redis for improved performance and faster query results
-   **Authentication & Permissions:** Middleware-based access control for sellers and buyers
-   **Notifications:** Email and database-stored notifications for order updates

### **Core Features**

âœ… **User Roles & Authentication:** Buyers, sellers, and admins with role-based permissions
âœ… **Product Management:** Sellers can create, edit, and delete product listings
âœ… **Orders & Payments:** Buyers can place orders with secure payments (Stripe/PayPal)
âœ… **Real-Time Updates:** Order status notifications and live product availability updates
âœ… **Reviews & Ratings:** Customers can review products and sellers
âœ… **Admin Dashboard:** Manage users, products, and transactions
âœ… **API Resources:** Eloquent resources for structured API responses


// General Guidelines
1. **Framework Usage:**
   - Utilize Laravel for backend logic and routing.
   - Employ Vue.js for building interactive user interfaces.
   - Use Inertia.js to bridge Laravel and Vue.js, enabling SPA behavior without a full API.
   - Integrate shadcn-vue components for consistent and accessible UI elements.
   - Implement Pinia for state management across Vue components.

2. **Code Structure:**
   - **Models:** Define Laravel models in `app/Models`, using Eloquent ORM for database interactions.
     ðŸ”— [Laravel Eloquent ORM](https://laravel.com/docs/eloquent)

   - **Migrations:** Store database migration files in `database/migrations` and use `php artisan migrate` for database changes.
     ðŸ”— [Laravel Migrations](https://laravel.com/docs/migrations)

   - **Factories:** Place model factories in `database/factories` for generating fake test data using `Faker`.
     ðŸ”— [Laravel Model Factories](https://laravel.com/docs/database-testing#writing-factories)

   - **Controllers:** Store controllers in `app/Http/Controllers`, keeping them focused on handling requests and separating business logic.
     ðŸ”— [Laravel Controllers](https://laravel.com/docs/controllers)

   - **Requests (Form Validation):** Use `app/Http/Requests` for validating form input before processing.
     ðŸ”— [Laravel Form Requests](https://laravel.com/docs/validation#form-request-validation)

   - **Repositories:** Implement a repository pattern in `app/Repositories` to separate database queries from controllers for better maintainability.
     ðŸ”— [Laravel Repository Pattern Guide](https://medium.com/@RawezhJawdat/implementing-repository-pattern-in-laravel-using-service-provider-4a5235fd98bf)

   - **Seeders:** Store seeders in `database/seeders`, used for populating the database with test data using `php artisan db:seed`.
     ðŸ”— [Laravel Seeders](https://laravel.com/docs/seeding)

   - **Middlewares:** Use middleware in `app/Http/Middleware` for authentication, permissions, and request filtering.
     ðŸ”— [Laravel Middleware](https://laravel.com/docs/middleware)

   - **Notifications:** Handle system notifications in `app/Notifications`, sending via email and storing them in the database.
     ðŸ”— [Laravel Notifications](https://laravel.com/docs/notifications)

   - **Resources (API Responses):**
     - Store API resources in `app/Http/Resources` to transform Eloquent models into structured JSON responses.
     - Use `JsonResource` to customize the API response structure instead of exposing raw database models.
     - Utilize `collection()` method when returning multiple records to optimize API responses.
     ðŸ”— [Laravel API Resources](https://laravel.com/docs/eloquent-resources)

3. **Styling:**
   - Apply Tailwind CSS for consistent and utility-first styling.
   - Customize shadcn-vue components as needed to align with the project's design requirements.
   - Avoid inline styles; instead, use Tailwind's utility classes.
   ðŸ”— [Tailwind CSS Documentation](https://tailwindcss.com/docs)
   ðŸ”— [shadcn-vue Documentation](https://www.shadcn-vue.com/)

4. **State Management with Pinia:**
   - Initialize Pinia in `app.js` or `main.js` and provide it to the Vue application.
   - Define stores in `resources/js/Stores` using `defineStore`.
   - Use Pinia stores to manage global state and synchronize data with Inertia.js.
   ðŸ”— [Pinia Documentation](https://pinia.vuejs.org/)

5. **Data Handling:**
   - Fetch data from Laravel controllers and pass it to Vue components as props via Inertia.js.
   - Validate and sanitize all data in Laravel before passing it to the frontend.
   - Use repositories to handle database interactions and maintain clean controller logic.
   ðŸ”— [Inertia.js Documentation](https://inertiajs.com/)

6. **Routing:**
   - Define server-side routes in `routes/web.php`.
   - Use Inertia.js `<Link>` component for client-side navigation to preserve SPA behavior.
   ðŸ”— [Laravel Routing](https://laravel.com/docs/routing)

7. **Forms and Validation:**
   - Use Laravel Form Requests (`app/Http/Requests`) for validating input data before processing.
   - Handle form submissions using Inertia.js form helpers to manage state and errors.
   - Utilize shadcn-vue's form components with VeeValidate for real-time validation.
   ðŸ”— [VeeValidate for Vue](https://vee-validate.logaretm.com/)

8. **Error Handling:**
   - Implement global error handling in Laravel and display user-friendly messages in the UI.
   - Use Laravel's built-in logging for server-side errors and Vue's error handling mechanisms for client-side issues.
   ðŸ”— [Laravel Error Handling](https://laravel.com/docs/errors)

9. **Authentication & Permissions:**
   - Use Laravelâ€™s built-in authentication (`sanctum` or `passport`) for user authentication.
   - Implement middleware for permission-based access control.
   - Restrict access to certain pages using Laravel policies and gates.
   ðŸ”— [Laravel Authentication](https://laravel.com/docs/authentication)

10. **Testing:**
   - Write PHPUnit tests for backend logic.
   - Use Jest or Vue Test Utils for frontend component testing.
   - Use factories and seeders to generate test data.
   ðŸ”— [Laravel Testing](https://laravel.com/docs/testing)
   ðŸ”— [Vue Test Utils](https://test-utils.vuejs.org/)

11. **Notifications:**
   - Use Laravelâ€™s notification system (`app/Notifications`) to send emails and store in-database notifications.
   - Utilize Vue components to display unread notifications in the frontend.
   ðŸ”— [Laravel Notifications](https://laravel.com/docs/notifications)

12. **Dependencies:**
    - Keep Laravel, Vue.js, Inertia.js, shadcn-vue, Pinia, and Tailwind CSS up to date.
    - Regularly audit and update npm and Composer packages to maintain security and performance.

// Naming Conventions
- **Vue Components:** Use `PascalCase` (e.g., `UserProfile.vue`).
- **JavaScript Files:** Use `camelCase` (e.g., `userProfile.js`).
- **CSS Classes:** Follow Tailwind CSS conventions without custom prefixes.
- **Laravel Controllers:** Append `Controller` to controller names (e.g., `UserController`).
- **Repositories:** Use `PascalCase` with `Repository` suffix (e.g., `UserRepository`).
- **Pinia Stores:** Use descriptive names ending with `Store` (e.g., `useUserStore`).

// Additional Notes
- Ensure consistent code formatting using Prettier (JavaScript) and PHP CS Fixer (PHP).
- Maintain clear documentation for components, stores, repositories, and controllers.
- Encourage code reviews and best practices to maintain high-quality code.
